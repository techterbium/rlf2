{"version":3,"sources":["components/async/Comp.js","components/common/UnderConstruction.js","components/Index.js","App.js","serviceWorker.js","index.js"],"names":["Home","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","m","loading","react_default","a","createElement","Library","RLFFooter","UnderConstruction","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","className","Component","Index","props","_this","call","toggle","newIsOpen","length","undefined","state","isOpen","setState","_this2","HashRouter","react","reactstrap_es","light","expand","style","backgroundColor","position","top","zIndex","Link","to","onClick","navbar","Switch","Route","exact","path","component","App","components_Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a85fb57e.chunk.js","sourcesContent":["import React from 'react';\nimport Loadable from \"react-loadable\";\n\nexport const Home = Loadable({\n  loader: () => import(\"../home/Home\" /* webpackChunkName: \"Home\" */).then(m => m.Home),\n  loading: () => <div>Loading..</div>\n});\n\nexport const Library = Loadable({\n    loader: () => import(\"../libraries/Library\" /* webpackChunkName: \"Library\" */).then(m => m.Library),\n    loading: () => <div>Loading..</div>\n  });\n\n\n  export const RLFFooter = Loadable({\n    loader: () => import(\"../common/RLFFooter\" /* webpackChunkName: \"RLFFooter\" */).then(m => m.RLFFooter),\n    loading: () => <div>Loading..</div>\n  });","import React, { Component } from 'react';\n\nexport class UnderConstruction extends Component {\n    render() {\n        return (\n            <div className=\"under-construction\">\n                Under Construction\n            </div>\n        );\n    }\n}","import React, { Component, Fragment } from \"react\";\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem } from \"reactstrap\";\n\nimport { Home, Library, RLFFooter } from \"./async/Comp\";\nimport { UnderConstruction } from \"../components/common/UnderConstruction\";\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggle = (...argument) => {\n    var newIsOpen =\n      argument.length === 1 && typeof argument[0] === \"boolean\"\n        ? argument[0]\n        : !this.state.isOpen;\n    this.setState({\n      isOpen: newIsOpen\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <Fragment>\n            <Navbar light expand=\"md\" style={{ backgroundColor: \"#ab2708\", position: \"sticky\", top: \"0px\", zIndex: \"1\"}}>\n              <Link\n                to=\"/\"\n                onClick={() => {\n                  this.toggle(false);\n                }}\n                className=\"nav-brand-item\"\n              >\n                Rural Library Foundation\n              </Link>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <Link to=\"/lib\" onClick={this.toggle} className=\"nav-item\">\n                      Libraries\n                    </Link>\n                  </NavItem>\n                  <NavItem>\n                    <Link to=\"/sp\" onClick={this.toggle} className=\"nav-item\">\n                      Sponsorers\n                    </Link>\n                  </NavItem>\n                  <NavItem>\n                    <Link to=\"/ac\" onClick={this.toggle} className=\"nav-item\">\n                      Activities\n                    </Link>\n                  </NavItem>\n                  <NavItem>\n                    <Link to=\"/ne\" onClick={this.toggle} className=\"nav-item\">\n                      News\n                    </Link>\n                  </NavItem>\n                  <NavItem>\n                    <Link to=\"/cu\" onClick={this.toggle} className=\"nav-item\">\n                      Contact Us\n                    </Link>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Navbar>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/lib\" component={Library} />\n              <Route component={UnderConstruction} />\n            </Switch>\n          </Fragment>\n        </Router>\n        <RLFFooter />\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React, { Component } from \"react\";\nimport Index from \"./components/Index\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return <Index />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}